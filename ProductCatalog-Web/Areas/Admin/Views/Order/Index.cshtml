@using ProductCatolog_Core.Enums
@model IEnumerable<ProductCatolog_Core.DTOs.OrderUserDTO>
@{
    ViewData["Title"] = "Orders";
}
<head>
    <link href="~/css/Order/index.css" rel="stylesheet" />
</head>

<h1 class="mb-4 text-white">Orders</h1>

<div class="table-container">
    <table class="table table-hover table-bordered table-striped">
        <thead>
            <tr>
                <th>Customer Name</th>
                <th>Order Name</th>
                <th>City</th>
                <th>Status</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>

                    <td>@Html.DisplayFor(modelItem => item.OrderName)</td>
                    <td>@Html.DisplayFor(modelItem => item.City)</td>
                    <td>
                        @switch (item.OrderStatus)
                        {
                            case OrderStatus.OrderReceived:
                                <span class="badge bg-secondary">Order Received</span>
                                break;
                            case OrderStatus.OrderConfirmed:
                                <span class="badge bg-primary">Order Confirmed</span>
                                break;
                            case OrderStatus.OrderCancelled:
                                <span class="badge bg-danger">Cancelled</span>
                                break;
                            case OrderStatus.Processing:
                                <span class="badge bg-warning text-dark">Processing</span>
                                break;
                            case OrderStatus.Shipped:
                                <span class="badge bg-info text-dark">Shipped</span>
                                break;
                            case OrderStatus.Delivered:
                                <span class="badge bg-success">Delivered</span>
                                break;
                            case OrderStatus.Returned:
                                <span class="badge bg-dark">Returned</span>
                                break;
                            default:
                                <span class="badge bg-light text-dark">Unknown Status</span>
                                break;
                        }
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.OrderDate)</td>
                    <td>
                        <a asp-action="Detail" asp-route-OrderId="@item.OrderId" class="btn btn-sm btn-info me-2" title="View Details">
                            <i class="fas fa-eye"></i> View
                        </a>
                        <a asp-action="Edit" asp-route-id="@item.OrderId" class="btn btn-sm btn-warning me-2" title="Edit Order">
                            <i class="fas fa-edit"></i> Edit
                        </a>
                        <a asp-action="Complete" asp-route-OrderId="@item.OrderId" class="btn btn-sm btn-success" title="Complete Order">
                            <i class="fas fa-check-circle"></i> Complete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>

    document.querySelectorAll('.table th').forEach((th, index) => {
        th.addEventListener('click', () => {
            const rows = Array.from(document.querySelectorAll('.table tbody tr'));
            const isAscending = th.classList.contains('asc');
            rows.sort((a, b) => {
                const aText = a.children[index].textContent.trim();
                const bText = b.children[index].textContent.trim();
                return isAscending ? aText.localeCompare(bText) : bText.localeCompare(aText);
            });
            rows.forEach(row => document.querySelector('.table tbody').appendChild(row));
            th.classList.toggle('asc', !isAscending);
        });
    });
</script>
